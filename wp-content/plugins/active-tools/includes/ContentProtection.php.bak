<?php


namespace ActiveTools;

use Wa72\HtmlPageDom\HtmlPageCrawler;

class ContentProtection {

    private function __construct() {
        $this->register_hooks();
    }

    protected static ?ContentProtection $instance = null;

    public static function getInstance() {
        NULL === self::$instance and self::$instance = new self;
        return self::$instance;
    }

    private function register_hooks() {

        add_action( 'wp_head', array( $this, 'wp_head' ) );
        add_filter( 'the_content', array( $this, 'filter_content' ), PHP_INT_MAX - 1 );

    }

    public function wp_head() {
        global $post;
        ?>
        <link href="https://fonts.googleapis.com/css2?family=Inconsolata:wght@500;600;700;900&display=swap" rel="stylesheet">
        <?php
    }

    function filter_content( $content ) {

        global $post;

        $obfuscation_types = [];

        if ( $post ) {
            $at_po_types = get_post_meta( $post->ID, '_at_po_t', true );

            if ( ! empty( $at_po_types ) ) {
                foreach( $at_po_types as $at_po_type ) {
                    $obfuscation_types[] = $at_po_type['value'];
                }
            }
        }

        if ( empty( $obfuscation_types ) || in_array( 'disabled', $obfuscation_types ) ) {
            return $content;
        }
 
        $ob_all = in_array( 'all', $obfuscation_types );

        $c = new HtmlPageCrawler('<div class="po-protect">' . $content . '</div>');

        /** @var $node \Symfony\Component\CssSelector\Node\ElementNode */

        if ( $ob_all || in_array( 'scrambled_text', $obfuscation_types ) ) {
            $po_content = $c->filter( '.po-protect' );

            $inner_tags_filter = [
                'em',
                'strong',
                'i',
                'a'
            ];

            $po_content->each( function ( $po_ele, $i ) use ( $inner_tags_filter ) {
                $po_ele->filter( '.po-protect .container p' )->each( function ( $outer_element, $j ) use ( $inner_tags_filter ) {

                    // global $po_inner_elements;

                    // $randid = md5( mt_rand( 0, 999999 ) );

                    $text = $outer_element->text();

                    $text = str_replace( 'the very least', 'the least', $text );
                    $text = str_replace( 'The very least', 'The least', $text );

                    $po_inner_elements = [];

                    // Grab top-most inner elements to process
                    /* $outer_element->children('em,i,strong')->each( function( $inner_element, $k ) {
                        global $po_inner_elements;

                        /** @var $inner_element Wa72\HtmlPageDom\HtmlPageCrawler

                        $text = $inner_element->text();
                        $element = $inner_element->getNode(0)->nodeName;
                        $po_inner_elements[] = [
                            'text' => $text,
                            'element' => $element,
                            'processed' => po_process_string( $text, $element )
                        ];
                    });

                    if ( ! empty( $po_inner_elements ) ) {
                        at_dbg( $po_inner_elements );
                    }
                    */

                    // $text_arr = po_mb_str_split( $text );

                    $outer_element->setInnerHtml( $this->process_string( $text ) );
                    // $node->addClass( 'po-' . $randid );

                } );
            } );
        }

        ob_start();
        ?>
        <style>
            div.po-protect {
                position: relative;
            }
            <?php if ( $ob_all || in_array( 'blocking_overlay', $obfuscation_types ) ) : ?>
            div.po-protect1::before {
                position: absolute;
                content: '';
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background-color: #000;
                opacity: 0;
                z-index: 99;
            }
            <?php endif; ?>
            div.po-protect, div.po-protect p, div.po-protect p::before, div.po-protect p::after, div.po-protect li {
                <?php if ( $ob_all || in_array( 'scrambled_text', $obfuscation_types ) ) : ?>
                font-family: 'Inconsolata', monospace !important;
                letter-spacing: -0.1px !important;
                line-height: 1.4;
                box-sizing: border-box;
                font-size: 16px !important;
                <?php endif; ?>
                <?php if ( $ob_all || in_array( 'no_text_select', $obfuscation_types ) ) : ?>
                /* -moz-user-select: none;
                -ms-user-select: none;
                -webkit-user-select: none;
                user-select: none; */
                <?php endif; ?>
            }
            div.po-protect * {
                background: transparent !important;
                box-sizing: border-box !important;
                position: relative;
            }
            div.po-protect p {
                position: relative;
            }
            div.po-protect p:first-child {
                margin-bottom: 2em;
            }
            div.po-protect p span.po-after {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
            }
            div.po-protect p span.po-no-break {
                white-space: nowrap;
            }
        </style>
        <?php

        return ob_get_clean() . $c->saveHTML();
    }

    private function split_text_by_inner_elements( string $text, array $inner_elements ) {
        $string = [ $text ];
        $result = [];
    }

    private function mb_str_split( $string ) {
        return mb_split('/(?<!^)(?!$)/u', $string );
    }

    private function process_string( string $string, $wrap_element = 'span' ) {

        $str_arr = mb_split( '\s', $string );

        mt_srand( AT_RAND_NUM1 );

        $before_text = '';
        $after_text = '';

        foreach( $str_arr as $word ) {
            if ( false == ( mt_rand( 0, 10 ) > 5 ) ) {
                $before_text .= '<'.$wrap_element.' class="po-no-break">' . $word . '</'.$wrap_element.'> ';
                $after_text .= '<'.$wrap_element.' class="po-no-break">' . $this->string_spaces( mb_strlen( $word ) ) . '</'.$wrap_element.'> ';
            } else {
                $before_text .= '<'.$wrap_element.' class="po-no-break">' . $this->string_spaces( mb_strlen( $word ) ) . '</'.$wrap_element.'> ';
                $after_text .= '<'.$wrap_element.' class="po-no-break">' . $word . '</'.$wrap_element.'> ';
            }
        }

        return $before_text . '<span class="po-after">' . $after_text . '</span>';
    }

    private function span_punctuation( $string ) {
        return preg_replace('[-\.,!]', "<span>$1</span>", $string );
    }

    private function string_spaces( int $num_spaces ) {
        $out = '';
        for( $i = 0; $i < $num_spaces; $i++ ) {
            $out .= '&nbsp;';
        }
        return $out;
    }

    private function mb_strrev($str){
        $r = '';
        for ($i = mb_strlen($str); $i>=0; $i--) {
            $r .= mb_substr($str, $i, 1);
        }
        return $r;
    }

    private function string_random_spaced( $string, $reversed ) {

        mt_srand( AT_RAND_NUM1 );

        $out = '';

        $strlen = mb_strlen($string);

        $str_arr = mb_split( '\s', $string );

        foreach( $str_arr as $str ) {
            if ( $reversed == ( mt_rand( 0, 10 ) > 9 ) ) {
                $out .= $str . '\00A0 ';
            } else {
                $out .= $str . ' ';
            }
        }

        return $out;

    }
}
