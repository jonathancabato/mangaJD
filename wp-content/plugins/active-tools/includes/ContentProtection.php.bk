<?php


namespace ActiveTools;

use Wa72\HtmlPageDom\HtmlPageCrawler;

class ContentProtection {
    
    private int $rand_num1;
    private int $rand_num2;
    private string $rand_num1_string;
    private string $rand_num2_string;
    
    private function __construct() {
        $this->register_hooks();
        
        $this->rand_num1 = rand(0, 999999);
        $this->rand_num2 = rand(0, 999999);
        
        $this->rand_num1_string = md5( $this->rand_num1 );
        $this->rand_num2_string = md5( $this->rand_num2 );
    }
    
    protected static ?ContentProtection $instance = null;
    
    public static function getInstance() {
        NULL === self::$instance and self::$instance = new self;
        return self::$instance;
    }
    
    private function register_hooks() {
    
        add_filter( 'the_content', array( $this, 'filter_content' ), PHP_INT_MAX - 1 );
    
    }

    public function wp_head() {
        global $post;
        ?>
        
        <?php
    }
    
    function filter_content( $content ) {
        
        global $post, $at_cp_styles;
        
        $obfuscation_types = [];
        
        if ( $post ) {
            $at_po_types = get_post_meta( $post->ID, '_at_po_t', true );
            
            if ( ! empty( $at_po_types ) ) {
                foreach( $at_po_types as $at_po_type ) {
                    $obfuscation_types[] = $at_po_type['value'];
                }
            }
        }
        
        if ( empty( $obfuscation_types ) || in_array( 'disabled', $obfuscation_types ) ) {
            return $content;
        }
        
        $ob_all = in_array( 'all', $obfuscation_types );
        
        $c = new HtmlPageCrawler('<div class="at-cp-wrap">' . $content . '</div>');
        
        /** @var $node \Symfony\Component\CssSelector\Node\ElementNode */
    
        $styles = '';
        
        if ( $ob_all || in_array( 'scrambled_text', $obfuscation_types ) ) {
            $po_content = $c->filter( '.at-cp-wrap' );
    
            $inner_tags_filter = [
                'em',
                'strong',
                'i',
                'a'
            ];
    
            $at_cp_styles = '<style>';
            
            $po_content->each( function ( $po_ele, $i ) {
                $po_ele->filter( '.at-cp-wrap p' )->each( function ( $outer_element, $j ) {
                    
                    global $at_cp_styles;
                    
                    $text = $outer_element->text();
            
                    $text = str_replace( 'the very least', 'the least', $text );
                    $text = str_replace( 'The very least', 'The least', $text );
            
                    $text_data = $this->process_string( $text );
                    
                    $inner_text = '';
                    
                    if ( is_array( $text_data ) ) {
                    
                        foreach( $text_data as $item ) {
        
                            $inner_text .= '<span class=" ' . $item['class'] . '"> ' . $item['inner_text'] . ' </span>';
                            ob_start();
                            ?>
                            .<?php echo $item['class']; ?>::before {
                                content: '<?php echo str_replace('\'', '\\\'', $item['before_text'] ); ?>';
                            }
                            .<?php echo $item['class']; ?>::after {
                                content: '<?php echo str_replace('\'', '\\\'', $item['after_text'] ); ?>';
                            }
                            <?php
    
                            $at_cp_styles .= ob_get_clean();
                        }
                    } else {
                        $inner_text = $text_data;
                    }
                    
                    $outer_element->setInnerHtml( $inner_text );
                    
                } );
            } );
            $at_cp_styles .= '</style>';
        }
        
        return $c->saveHTML() . $at_cp_styles;
    }
    
    private function split_text_by_inner_elements( string $text, array $inner_elements ) {
        $string = [ $text ];
        $result = [];
    }
    
    private function mb_str_split( $string ) {
        return mb_split('/(?<!^)(?!$)/u', $string );
    }
    
    private function process_string( string $string, $wrap_element = 'span' ) {
        
        $letter_arr = str_split('abcdefghijklmnopqrstuvwxyz');
        $str_arr = mb_split( '\s', $string );
    
        $processed_content = [];
        
        $num_words = count( $str_arr );
        
        if ( $num_words < 4 ) {
            return $string;
        }
        
        for ( $i = 0; $i < $num_words - 2; $i++ ) {
            
            $before_len = min( rand( 1, 6 ), $num_words - $i - 2 );
            $inner_len = min( rand( 1, 6 ), $num_words - $i - $before_len );
            $after_len = min( rand( 1, 6 ), $num_words - $i - $before_len - $inner_len);
            
            $before_text = implode(' ', array_slice( $str_arr, $i, $before_len ) );
            $inner_text = implode(' ', array_slice( $str_arr, $i + $before_len, $inner_len ) );
            $after_text = implode(' ', array_slice( $str_arr, $i + $before_len + $inner_len, $after_len ) );
            
            /* echo '<pre>'.
                 '<br><br>' .
                'Num Words: ' . $num_words . '<br>'.
                'Before Len: ' . $before_len . '<br>'.
                'Before Text: ' . $before_text . '<br>' .
                'Inner Len: ' . $inner_len . '<br>' .
                'Inner Text: ' . $inner_text . '<br>' .
                'After Len: ' . $after_len . '<br>' .
                'After Text: ' . $after_text . '<br>'
                . '</pre>'
            ; */
            
            $class = $letter_arr[rand(0,25)] . md5( rand( 0, 999999 ) );
    
            $processed_content[] = [
                'class' => $class,
                'before_text' => ( $i == 0 ? '' : '\a0 ') . $before_text,
                'inner_text' => $inner_text,
                'after_text' => $after_text,
            ];
            
            $i += $before_len + $inner_len + $after_len - 1;
        }
        
        return $processed_content;
    }
    
    private function span_punctuation( $string ) {
        return preg_replace('[-\.,!]', "<span>$1</span>", $string );
    }
    
    private function string_spaces( int $num_spaces ) {
        $out = '';
        for( $i = 0; $i < $num_spaces; $i++ ) {
            $out .= '&nbsp;';
        }
        return $out;
    }
    
    private function mb_strrev($str){
        $r = '';
        for ($i = mb_strlen($str); $i>=0; $i--) {
            $r .= mb_substr($str, $i, 1);
        }
        return $r;
    }
    
    private function string_random_spaced( $string, $reversed ) {
        
        mt_srand( $this->rand_num1 );
        
        $out = '';
        
        $strlen = mb_strlen($string);
        
        $str_arr = mb_split( '\s', $string );
        
        foreach( $str_arr as $str ) {
            if ( $reversed == ( mt_rand( 0, 10 ) > 9 ) ) {
                $out .= $str . '\00A0 ';
            } else {
                $out .= $str . ' ';
            }
        }
        
        return $out;
        
    }
}
